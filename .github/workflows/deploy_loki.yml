name: Deploy Loki

on:
  workflow_dispatch:
    inputs:
      host:
        description: 'Host to deploy'
        required: true
        default: 'dev_infra-droplet'
        type: choice
        options:
          - dev_infra-droplet
          - production-infra

jobs:
  deploy-on-the-dev_infra-droplet:
    if: github.event.inputs.host == 'dev_infra-droplet'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Copy loki configuration
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "./loki-config.yml"
          target: "/home/${{ secrets.VPS_USERNAME }}/loki/"

      - name: Remove old container and deploy loki container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            docker stop loki || true
            docker rm loki || true            
            docker pull grafana/loki:latest
            docker run -d --restart=unless-stopped --name loki --net ngdem -p 3100:3100 \
                -v /home/${{ secrets.VPS_USERNAME }}/loki/loki-config.yml:/etc/loki/loki-config.yml \
                -v /var/lib/loki/chunks:/loki/chunks -v /var/lib/loki/rules:/loki/rules \
                grafana/loki:2.9.9 -config.file=/etc/loki/loki-config.yml

  deploy-on-the-production-infra:
    if: github.event.inputs.host == 'production-infra'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Copy loki configuration
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VPS_HOST_PROD_INFRA }}
          port: ${{ secrets.VPS_SSH_PORT_PROD }}
          username: ${{ secrets.VPS_USERNAME_PROD_INFRA }}
          key: ${{ secrets.VPS_SSH_KEY_PROD_INFRA }}
          source: "./loki-config.production-infra.yml"
          target: "/home/${{ secrets.VPS_USERNAME_PROD_INFRA }}/loki/"

      - name: Remove old container and deploy loki container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST_PROD_INFRA }}
          port: ${{ secrets.VPS_SSH_PORT_PROD }}
          username: ${{ secrets.VPS_USERNAME_PROD_INFRA }}
          key: ${{ secrets.VPS_SSH_KEY_PROD_INFRA }}
          script: |
            docker stop loki || true
            docker rm loki || true            
            docker pull grafana/loki:latest
            docker run -d --restart=unless-stopped --name loki --net ngdem -p 3100:3100 \
                -v /home/${{ secrets.VPS_USERNAME_PROD_INFRA }}/loki/loki-config.production-infra.yml:/etc/loki/loki-config.yml \
                -v /var/lib/loki/chunks:/loki/chunks -v /var/lib/loki/rules:/loki/rules \
                grafana/loki:2.9.9 -config.file=/etc/loki/loki-config.yml  
  
  healthcheck:
    needs: [deploy-on-the-dev_infra-droplet, deploy-on-the-production-infra]
    if: github.event.inputs.host == 'dev_infra-droplet' || github.event.inputs.host ==  'production-infra'
    runs-on: ubuntu-latest      
    steps:   
      - name: Run Healthcheck
        uses: appleboy/ssh-action@master   
        with:   
          host: ${{ github.event.inputs.host == 'dev_infra-droplet' && secrets.VPS_HOST || secrets.VPS_HOST_PROD_INFRA }}
          port: ${{ github.event.inputs.host == 'dev_infra-droplet' && secrets.VPS_SSH_PORT || secrets.VPS_SSH_PORT_PROD }}
          username: ${{ github.event.inputs.host == 'dev_infra-droplet' && secrets.VPS_USERNAME || secrets.VPS_USERNAME_PROD_INFRA }}
          key: ${{ github.event.inputs.host == 'dev_infra-droplet' && secrets.VPS_SSH_KEY || secrets.VPS_SSH_KEY_PROD_INFRA }}
          script: |
            retries=3
            delay_seconds=20

            for attempt in $(seq "$retries"); do
            http_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3100/ready)
              
              if [ "$http_status" -eq 200 ]; then
                echo "The service has been successfully raised"
                echo "status=success" >> "$GITHUB_ENV"
                exit 0
              else
                echo "Error: Service not available (attempt $attempt/$retries)"
              fi

              if [ "$attempt" -lt "$retries" ]; then
                sleep "$delay_seconds"
              fi
            done

            echo "Failed to start new container."
            echo "status=failure" >> "$GITHUB_ENV"
            exit 1