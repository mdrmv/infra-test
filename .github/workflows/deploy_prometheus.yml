name: Deploy Prometheus

on:
  workflow_dispatch:
    inputs:
      host:
        description: 'Host to deploy'
        required: true
        default: 'dev_infra-droplet'
        type: choice
        options:
          - dev_infra-droplet
          - production-infra

jobs:
  deploy-on-the-dev_infra-droplet:
    if: github.event.inputs.host == 'dev_infra-droplet'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Copy Prometheus configuration
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "./prometheus.yml, ./first_rules.yml"
          target: "/home/${{ secrets.VPS_USERNAME }}/prometheus/"

      - name: Remove old container and deploy Prometheus container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            docker stop prometheus || true
            docker rm prometheus || true
            docker pull prom/prometheus
            docker run -d --restart=unless-stopped -v /var/lib/prometheus:/prometheus \
              -v /home/${{ secrets.VPS_USERNAME }}/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml \
              -v /home/github-actions/prometheus/first_rules.yml:/etc/prometheus/first_rules.yml \
              --name prometheus --net ngdem -p 9090:9090 prom/prometheus

  deploy-on-the-production-infra:
    if: github.event.inputs.host == 'production-infra'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Copy Prometheus configuration
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VPS_HOST_PROD_INFRA }}
          username: ${{ secrets.VPS_USERNAME_PROD_INFRA }}
          key: ${{ secrets.VPS_SSH_KEY_PROD_INFRA }}
          source: "./prometheus.production-infra.yml"
          target: "/home/${{ secrets.VPS_USERNAME_PROD_INFRA }}/prometheus/"

      - name: Remove old container and deploy Prometheus container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST_PROD_INFRA }}
          username: ${{ secrets.VPS_USERNAME_PROD_INFRA }}
          key: ${{ secrets.VPS_SSH_KEY_PROD_INFRA }}
          script: |
            docker stop prometheus || true
            docker rm prometheus || true
            docker pull prom/prometheus
            docker run -d --restart=unless-stopped -v /var/lib/prometheus:/prometheus \
              -v /home/${{ secrets.VPS_USERNAME_PROD_INFRA }}/prometheus/prometheus.production-infra.yml:/etc/prometheus/prometheus.yml \
              --name prometheus --net ngdem -p 9090:9090 prom/prometheus

  healthcheck:
    needs: [deploy-on-the-dev_infra-droplet, deploy-on-the-production-infra]
    if: github.event.inputs.host == 'dev_infra-droplet' || github.event.inputs.host == 'production-infra'
    runs-on: ubuntu-latest
    steps:
      - name: Run Healthcheck
        uses: appleboy/ssh-action@master   
        with:
          host: ${{ github.event.inputs.host == 'dev_infra-droplet' && secrets.VPS_HOST || secrets.VPS_HOST_PROD_INFRA }}
          username: ${{ github.event.inputs.host == 'dev_infra-droplet' && secrets.VPS_USERNAME || secrets.VPS_USERNAME_PROD_INFRA }}
          key: ${{ github.event.inputs.host == 'dev_infra-droplet' && secrets.VPS_SSH_KEY || secrets.VPS_SSH_KEY_PROD_INFRA }}  
          script: |
            retries=3
            delay_seconds=20

            for attempt in $(seq "$retries"); do
            http_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:9090/-/healthy)
              
              if [ "$http_status" -eq 200 ]; then
                echo "The service has been successfully raised"
                echo "status=success" >> "$GITHUB_ENV"
                exit 0
              else
                echo "Error: Service not available (attempt $attempt/$retries)"
              fi

              if [ "$attempt" -lt "$retries" ]; then
                sleep "$delay_seconds"
              fi
            done

            echo "Failed to start new container."
            echo "status=failure" >> "$GITHUB_ENV"
            exit 1