name: Deploy Grafana

on:
  workflow_dispatch:
    inputs:
      host:
        description: 'Host to deploy'
        required: true
        default: 'dev_infra-droplet'
        type: choice
        options:
          - dev_infra-droplet
          - production-infra

jobs:
  deploy-on-the-dev_infra-droplet:
    if: github.event.inputs.host == 'dev_infra-droplet'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Remove old container and deploy Grafana container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            docker stop grafana || true
            docker rm grafana || true
            docker pull grafana/grafana
            docker run -d --restart=unless-stopped -v /var/lib/grafana:/var/lib/grafana --name grafana --net ngdem -p 3000:3000 grafana/grafana:11.1.1

  deploy-on-the-production-infra:
    if: github.event.inputs.host == 'production-infra'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Remove old container and deploy Grafana container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST_PROD_INFRA }}
          username: ${{ secrets.VPS_USERNAME_PROD_INFRA }}
          key: ${{ secrets.VPS_SSH_KEY_PROD_INFRA }}
          script: |
            docker stop grafana || true
            docker rm grafana || true
            docker pull grafana/grafana
            docker run -d --restart=unless-stopped -v /var/lib/grafana:/var/lib/grafana --name grafana --net ngdem -p 3000:3000 grafana/grafana:11.3.0

  healthcheck:
    needs: [deploy-on-the-dev_infra-droplet, deploy-on-the-production-infra]
    if: github.event.inputs.host == 'dev_infra-droplet' || github.event.inputs.host == 'production-infra'
    runs-on: ubuntu-latest
    steps:
      - name: Run Healthcheck
        uses: appleboy/ssh-action@master   
        with:
          host: ${{ github.event.inputs.host == 'dev_infra-droplet' && secrets.VPS_HOST || secrets.VPS_HOST_PROD_INFRA }}
          username: ${{ github.event.inputs.host == 'dev_infra-droplet' && secrets.VPS_USERNAME || secrets.VPS_USERNAME_PROD_INFRA }}
          key: ${{ github.event.inputs.host == 'dev_infra-droplet' && secrets.VPS_SSH_KEY || secrets.VPS_SSH_KEY_PROD_INFRA }}
          script: |
            retries=3
            delay_seconds=20

            for attempt in $(seq "$retries"); do
              http_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/health)
              
              if [ "$http_status" -eq 200 ]; then
                echo "The service has been successfully raised"
                echo "status=success" >> "$GITHUB_ENV"
                exit 0
              else
                echo "Error: Service not available (attempt $attempt/$retries)"
              fi

              if [ "$attempt" -lt "$retries" ]; then
                sleep "$delay_seconds"
              fi
            done

            echo "Failed to start new container."
            echo "status=failure" >> "$GITHUB_ENV"
            exit 1